import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import alias from "esbuild-plugin-alias";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// Define base options shared by prod and dev
let esbuildOptions = {
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,	plugins: [
		alias({
			"@": path.resolve(__dirname, "src"),
			"@types": path.resolve(__dirname, "src/types/index.ts"),
			"@constants": path.resolve(__dirname, "src/constants.ts"),
			"@build-manager": path.resolve(__dirname, "src/build-manager/index.ts"),
			"@settings": path.resolve(__dirname, "src/settings/index.ts"),
			"@ui": path.resolve(__dirname, "src/ui"),
			"@utils": path.resolve(__dirname, "src/utils"),
			"@views": path.resolve(__dirname, "src/views"),
		}),
	],
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	treeShaking: true,
	outfile: "main.js",
};

if (prod) {
	esbuildOptions = {
		...esbuildOptions,
		minifyWhitespace: true,   // Minify whitespace
		minifySyntax: true,       // Minify syntax
		minifyIdentifiers: false, // Explicitly DO NOT minify identifiers
		keepNames: true,          // This should now be effective for names
		sourcemap: false,         // No sourcemap for production
	};
} else { // dev
	esbuildOptions = {
		...esbuildOptions,
		minify: false,        // No minification in dev
		sourcemap: "inline",  // Inline sourcemap for dev
		keepNames: true,      // Good to have in dev for consistency
	};
}

const context = await esbuild.context(esbuildOptions);

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
